/* auto-generated by NAPI-RS */
/* eslint-disable */
export declare class OpenDictionary {
  static load(
    dictionary: string,
    options?: LoadOptions | undefined | null,
  ): Promise<OpenDictionary>;
  constructor(data: Buffer);
  save(path: string, options?: SaveOptions | undefined | null): void;
  get minRank(): number | null;
  get maxRank(): number | null;
  lookup(
    query: string | Array<string>,
    options?: LookupOptions | undefined | null,
  ): Array<LookupResult>;
  lexicon(): Array<string>;
  index(options?: IndexOptions | undefined | null): void;
  search(
    query: string,
    options?: SearchOptions | undefined | null,
  ): Array<Entry>;
  tokenize(
    text: string,
    options?: TokenizeOptions | undefined | null,
  ): Array<Token>;
}

export interface AliasLoadOptions {
  path?: string;
}

export declare function compile(xml: string): Buffer;

export interface CompressOptions {
  quality?: number;
  windowSize?: number;
}

export interface Definition {
  id?: string;
  value: string;
  examples: Array<Example>;
  notes: Array<Note>;
}

export interface Entry {
  term: string;
  rank?: number;
  seeAlso?: string;
  etymologies: Array<Etymology>;
  media: Array<MediaURL>;
}

export interface EnumWrapper {
  name: string;
  variant: string;
  value: string;
}

export interface Etymology {
  id?: string;
  pronunciations: Array<Pronunciation>;
  description?: string;
  senses: Record<string, Sense>;
}

export interface Example {
  value: string;
  translations: Array<Translation>;
  pronunciations: Array<Pronunciation>;
}

export interface Form {
  term: string;
  kind?: EnumWrapper;
  tags: Array<string>;
}

export interface Group {
  id?: string;
  description: string;
  definitions: Array<Definition>;
}

export interface IndexOptions {
  directory?: string;
  memory?: number;
  overwrite?: boolean;
}

export interface LoadOptions {
  alias?: AliasLoadOptions;
}

export interface LookupOptions {
  split?: number;
  /**
   * Maximum number of redirects to follow via see_also links.
   * Pass true for infinite following, false for no following, or a number for specific limit.
   */
  follow?: boolean | number;
  insensitive?: boolean;
}

export interface LookupResult {
  entry: Entry;
  directedFrom?: Entry;
}

export interface MediaUrl {
  src: string;
  mimeType?: string;
  description?: string;
}

export interface Note {
  id?: string;
  value: string;
  examples: Array<Example>;
}

export interface Pronunciation {
  kind?: EnumWrapper;
  value: string;
  media: Array<MediaUrl>;
}

export interface SaveOptions {
  compress?: CompressOptions;
}

export interface SearchOptions {
  directory?: string;
  threshold?: number;
  autoindex?: boolean;
  limit?: number;
}

export interface Sense {
  pos: EnumWrapper;
  lemma?: string;
  definitions: Array<Definition | Group>;
  tags: Array<string>;
  translations: Array<Translation>;
  forms: Array<Form>;
}

export interface SplitOptions {
  minLength?: number;
}

export interface Token {
  lemma: string;
  language?: string;
  entries: Array<LookupResult>;
  kind: string;
  script: string;
  start: number;
  end: number;
}

export interface TokenizeOptions {
  follow?: boolean | number;
  allowList?: Array<string>;
  insensitive?: boolean;
}

export interface Translation {
  lang: string;
  value: string;
}
