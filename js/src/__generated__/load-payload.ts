// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class LoadPayload {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):LoadPayload {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsLoadPayload(bb:flatbuffers.ByteBuffer, obj?:LoadPayload):LoadPayload {
  return (obj || new LoadPayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsLoadPayload(bb:flatbuffers.ByteBuffer, obj?:LoadPayload):LoadPayload {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new LoadPayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

path():string|null
path(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
path(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startLoadPayload(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addPath(builder:flatbuffers.Builder, pathOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, pathOffset, 0);
}

static endLoadPayload(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createLoadPayload(builder:flatbuffers.Builder, pathOffset:flatbuffers.Offset):flatbuffers.Offset {
  LoadPayload.startLoadPayload(builder);
  LoadPayload.addPath(builder, pathOffset);
  return LoadPayload.endLoadPayload(builder);
}
}
