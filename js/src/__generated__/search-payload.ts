// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class SearchPayload {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SearchPayload {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSearchPayload(bb:flatbuffers.ByteBuffer, obj?:SearchPayload):SearchPayload {
  return (obj || new SearchPayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSearchPayload(bb:flatbuffers.ByteBuffer, obj?:SearchPayload):SearchPayload {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SearchPayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

force():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

exact():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

query():string|null
query(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
query(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startSearchPayload(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addForce(builder:flatbuffers.Builder, force:boolean) {
  builder.addFieldInt8(0, +force, +false);
}

static addExact(builder:flatbuffers.Builder, exact:boolean) {
  builder.addFieldInt8(1, +exact, +false);
}

static addQuery(builder:flatbuffers.Builder, queryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, queryOffset, 0);
}

static endSearchPayload(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSearchPayload(builder:flatbuffers.Builder, force:boolean, exact:boolean, queryOffset:flatbuffers.Offset):flatbuffers.Offset {
  SearchPayload.startSearchPayload(builder);
  SearchPayload.addForce(builder, force);
  SearchPayload.addExact(builder, exact);
  SearchPayload.addQuery(builder, queryOffset);
  return SearchPayload.endSearchPayload(builder);
}
}
