/* eslint-disable */
/* prettier-ignore */

/* auto-generated by NAPI-RS */

const __nodeFs = require('node:fs')
const __nodePath = require("node:path");
const { WASI: __nodeWASI } = require("node:wasi");
const { Worker } = require("node:worker_threads");

const {
  instantiateNapiModuleSync: __emnapiInstantiateNapiModuleSync,
  getDefaultContext: __emnapiGetDefaultContext,
  createOnMessage: __wasmCreateOnMessageForFsProxy,
} = require("@napi-rs/wasm-runtime");

const __rootDir = __nodePath.parse(process.cwd()).root;

const __wasi = new __nodeWASI({
  version: "preview1",
  env: process.env,
  preopens: {
    [__rootDir]: __rootDir,
  },
});

const __emnapiContext = __emnapiGetDefaultContext();

const __sharedMemory = new WebAssembly.Memory({
  initial: 4000,
  maximum: 65536,
  shared: true,
});

let __wasmFilePath = __nodePath.join(__dirname, "node.wasm32-wasi.wasm");
const __wasmDebugFilePath = __nodePath.join(
  __dirname,
  "node.wasm32-wasi.debug.wasm",
);

if (__nodeFs.existsSync(__wasmDebugFilePath)) {
  __wasmFilePath = __wasmDebugFilePath;
} else if (!__nodeFs.existsSync(__wasmFilePath)) {
  try {
    __wasmFilePath = __nodePath.resolve("@odict/node-wasm32-wasi");
  } catch {
    throw new Error(
      "Cannot find node.wasm32-wasi.wasm file, and @odict/node-wasm32-wasi package is not installed.",
    );
  }
}

const {
  instance: __napiInstance,
  module: __wasiModule,
  napiModule: __napiModule,
} = __emnapiInstantiateNapiModuleSync(__nodeFs.readFileSync(__wasmFilePath), {
  context: __emnapiContext,
  asyncWorkPoolSize: (function () {
    const threadsSizeFromEnv = Number(
      process.env.NAPI_RS_ASYNC_WORK_POOL_SIZE ??
        process.env.UV_THREADPOOL_SIZE,
    );
    // NaN > 0 is false
    if (threadsSizeFromEnv > 0) {
      return threadsSizeFromEnv;
    } else {
      return 4;
    }
  })(),
  wasi: __wasi,
  onCreateWorker() {
    const worker = new Worker(__nodePath.join(__dirname, "wasi-worker.mjs"), {
      env: process.env,
      execArgv: ["--experimental-wasi-unstable-preview1"],
    });
    worker.onmessage = ({ data }) => {
      __wasmCreateOnMessageForFsProxy(__nodeFs)(data);
    };
    return worker;
  },
  overwriteImports(importObject) {
    importObject.env = {
      ...importObject.env,
      ...importObject.napi,
      ...importObject.emnapi,
      memory: __sharedMemory,
    };
    return importObject;
  },
  beforeInit({ instance }) {
    __napi_rs_initialize_modules(instance);
  },
});

function __napi_rs_initialize_modules(__napiInstance) {
  __napiInstance.exports["__napi_register__Dictionary_struct_0"]?.();
  __napiInstance.exports["__napi_register__Dictionary_impl_10"]?.();
  __napiInstance.exports["__napi_register__Definition_struct_11"]?.();
  __napiInstance.exports["__napi_register__DictionaryOptions_struct_12"]?.();
  __napiInstance.exports["__napi_register__Entry_struct_13"]?.();
  __napiInstance.exports["__napi_register__Etymology_struct_14"]?.();
  __napiInstance.exports["__napi_register__Example_struct_15"]?.();
  __napiInstance.exports["__napi_register__Group_struct_16"]?.();
  __napiInstance.exports["__napi_register__IndexOptions_struct_17"]?.();
  __napiInstance.exports["__napi_register__LookupOptions_struct_18"]?.();
  __napiInstance.exports["__napi_register__LookupQuery_struct_19"]?.();
  __napiInstance.exports["__napi_register__MarkdownStrategy_20"]?.();
  __napiInstance.exports["__napi_register__MDString_struct_21"]?.();
  __napiInstance.exports["__napi_register__MDString_impl_25"]?.();
  __napiInstance.exports["__napi_register__Note_struct_26"]?.();
  __napiInstance.exports["__napi_register__SearchOptions_struct_27"]?.();
  __napiInstance.exports["__napi_register__Sense_struct_28"]?.();
  __napiInstance.exports["__napi_register__SplitOptions_struct_29"]?.();
}
module.exports.Dictionary = __napiModule.exports.Dictionary;
module.exports.MdString = __napiModule.exports.MdString;
module.exports.MDString = __napiModule.exports.MDString;
module.exports.MarkdownStrategy = __napiModule.exports.MarkdownStrategy;
