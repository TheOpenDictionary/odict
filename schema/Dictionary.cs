// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace schema
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Dictionary : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Dictionary GetRootAsDictionary(ByteBuffer _bb) { return GetRootAsDictionary(_bb, new Dictionary()); }
  public static Dictionary GetRootAsDictionary(ByteBuffer _bb, Dictionary obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Dictionary __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public schema.Entry? Entries(int j) { int o = __p.__offset(8); return o != 0 ? (schema.Entry?)(new schema.Entry()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int EntriesLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public schema.Entry? EntriesByKey(string key) { 
    int o = __p.__offset(8); 
    return o != 0 ? schema.Entry.__lookup_by_key(__p.__vector(o), key, __p.bb) : null; 
  }

  public static Offset<schema.Dictionary> CreateDictionary(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset nameOffset = default(StringOffset),
      VectorOffset entriesOffset = default(VectorOffset)) {
    builder.StartTable(3);
    Dictionary.AddEntries(builder, entriesOffset);
    Dictionary.AddName(builder, nameOffset);
    Dictionary.AddId(builder, idOffset);
    return Dictionary.EndDictionary(builder);
  }

  public static void StartDictionary(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddEntries(FlatBufferBuilder builder, VectorOffset entriesOffset) { builder.AddOffset(2, entriesOffset.Value, 0); }
  public static VectorOffset CreateEntriesVector(FlatBufferBuilder builder, Offset<schema.Entry>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEntriesVectorBlock(FlatBufferBuilder builder, Offset<schema.Entry>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartEntriesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<schema.Dictionary> EndDictionary(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<schema.Dictionary>(o);
  }
  public static void FinishDictionaryBuffer(FlatBufferBuilder builder, Offset<schema.Dictionary> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedDictionaryBuffer(FlatBufferBuilder builder, Offset<schema.Dictionary> offset) { builder.FinishSizePrefixed(offset.Value); }
}


}
