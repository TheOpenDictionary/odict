// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace schema
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Entry : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Entry GetRootAsEntry(ByteBuffer _bb) { return GetRootAsEntry(_bb, new Entry()); }
  public static Entry GetRootAsEntry(ByteBuffer _bb, Entry obj) {
     return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); 
     }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Entry __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Key { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetKeyBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetKeyBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetKeyArray() { return __p.__vector_as_array<byte>(4); }
  public string Term { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTermBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTermBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTermArray() { return __p.__vector_as_array<byte>(6); }
  public schema.Etymology? Etymologies(int j) { int o = __p.__offset(8); return o != 0 ? (schema.Etymology?)(new schema.Etymology()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int EtymologiesLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<schema.Entry> CreateEntry(FlatBufferBuilder builder,
      StringOffset keyOffset = default(StringOffset),
      StringOffset termOffset = default(StringOffset),
      VectorOffset etymologiesOffset = default(VectorOffset)) {
    builder.StartTable(3);
    Entry.AddEtymologies(builder, etymologiesOffset);
    Entry.AddTerm(builder, termOffset);
    Entry.AddKey(builder, keyOffset);
    return Entry.EndEntry(builder);
  }

  public static void StartEntry(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddKey(FlatBufferBuilder builder, StringOffset keyOffset) { builder.AddOffset(0, keyOffset.Value, 0); }
  public static void AddTerm(FlatBufferBuilder builder, StringOffset termOffset) { builder.AddOffset(1, termOffset.Value, 0); }
  public static void AddEtymologies(FlatBufferBuilder builder, VectorOffset etymologiesOffset) { builder.AddOffset(2, etymologiesOffset.Value, 0); }
  public static VectorOffset CreateEtymologiesVector(FlatBufferBuilder builder, Offset<schema.Etymology>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEtymologiesVectorBlock(FlatBufferBuilder builder, Offset<schema.Etymology>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartEtymologiesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<schema.Entry> EndEntry(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 4);  // key
    return new Offset<schema.Entry>(o);
  }

  public static VectorOffset CreateSortedVectorOfEntry(FlatBufferBuilder builder, Offset<Entry>[] offsets) {
    Array.Sort(offsets, (Offset<Entry> o1, Offset<Entry> o2) => Table.CompareStrings(Table.__offset(4, o1.Value, builder.DataBuffer), Table.__offset(4, o2.Value, builder.DataBuffer), builder.DataBuffer));
    return builder.CreateVectorOfTables(offsets);
  }

  public static Entry? __lookup_by_key(int vectorLocation, string key, ByteBuffer bb) {
    byte[] byteKey = System.Text.Encoding.UTF8.GetBytes(key);
    int span = bb.GetInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = Table.__indirect(vectorLocation + 4 * (start + middle), bb);
      int comp = Table.CompareStrings(Table.__offset(4, bb.Length - tableOffset, bb), byteKey, bb);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return new Entry().__assign(tableOffset, bb);
      }
    }
    return null;
  }
}


}
