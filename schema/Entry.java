// automatically generated by the FlatBuffers compiler, do not modify

package schema;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Entry extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static Entry getRootAsEntry(ByteBuffer _bb) { return getRootAsEntry(_bb, new Entry()); }
  public static Entry getRootAsEntry(ByteBuffer _bb, Entry obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Entry __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String key() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer keyAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer keyInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String term() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer termAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer termInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public schema.Etymology etymologies(int j) { return etymologies(new schema.Etymology(), j); }
  public schema.Etymology etymologies(schema.Etymology obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int etymologiesLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public schema.Etymology.Vector etymologiesVector() { return etymologiesVector(new schema.Etymology.Vector()); }
  public schema.Etymology.Vector etymologiesVector(schema.Etymology.Vector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createEntry(FlatBufferBuilder builder,
      int keyOffset,
      int termOffset,
      int etymologiesOffset) {
    builder.startTable(3);
    Entry.addEtymologies(builder, etymologiesOffset);
    Entry.addTerm(builder, termOffset);
    Entry.addKey(builder, keyOffset);
    return Entry.endEntry(builder);
  }

  public static void startEntry(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addKey(FlatBufferBuilder builder, int keyOffset) { builder.addOffset(0, keyOffset, 0); }
  public static void addTerm(FlatBufferBuilder builder, int termOffset) { builder.addOffset(1, termOffset, 0); }
  public static void addEtymologies(FlatBufferBuilder builder, int etymologiesOffset) { builder.addOffset(2, etymologiesOffset, 0); }
  public static int createEtymologiesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startEtymologiesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endEntry(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 4);  // key
    return o;
  }

  @Override
  protected int keysCompare(Integer o1, Integer o2, ByteBuffer _bb) { return compareStrings(__offset(4, o1, _bb), __offset(4, o2, _bb), _bb); }

  public static Entry __lookup_by_key(Entry obj, int vectorLocation, String key, ByteBuffer bb) {
    byte[] byteKey = key.getBytes(java.nio.charset.StandardCharsets.UTF_8);
    int span = bb.getInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = __indirect(vectorLocation + 4 * (start + middle), bb);
      int comp = compareStrings(__offset(4, bb.capacity() - tableOffset, bb), byteKey, bb);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return (obj == null ? new Entry() : obj).__assign(tableOffset, bb);
      }
    }
    return null;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Entry get(int j) { return get(new Entry(), j); }
    public Entry get(Entry obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
    public Entry getByKey(String key) {  return __lookup_by_key(null, __vector(), key, bb); }
    public Entry getByKey(Entry obj, String key) {  return __lookup_by_key(obj, __vector(), key, bb); }
  }
}

