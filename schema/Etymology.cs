// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace schema
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Etymology : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Etymology GetRootAsEtymology(ByteBuffer _bb) { return GetRootAsEtymology(_bb, new Etymology()); }
  public static Etymology GetRootAsEtymology(ByteBuffer _bb, Etymology obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Etymology __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  public string Description { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetDescriptionArray() { return __p.__vector_as_array<byte>(6); }
  public schema.Usage? Usages(int j) { int o = __p.__offset(8); return o != 0 ? (schema.Usage?)(new schema.Usage()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int UsagesLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public schema.Usage? UsagesByKey(schema.POS key) { int o = __p.__offset(8); return o != 0 ? schema.Usage.__lookup_by_key(__p.__vector(o), key, __p.bb) : null; }

  public static Offset<schema.Etymology> CreateEtymology(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset descriptionOffset = default(StringOffset),
      VectorOffset usagesOffset = default(VectorOffset)) {
    builder.StartTable(3);
    Etymology.AddUsages(builder, usagesOffset);
    Etymology.AddDescription(builder, descriptionOffset);
    Etymology.AddId(builder, idOffset);
    return Etymology.EndEtymology(builder);
  }

  public static void StartEtymology(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset descriptionOffset) { builder.AddOffset(1, descriptionOffset.Value, 0); }
  public static void AddUsages(FlatBufferBuilder builder, VectorOffset usagesOffset) { builder.AddOffset(2, usagesOffset.Value, 0); }
  public static VectorOffset CreateUsagesVector(FlatBufferBuilder builder, Offset<schema.Usage>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateUsagesVectorBlock(FlatBufferBuilder builder, Offset<schema.Usage>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartUsagesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<schema.Etymology> EndEtymology(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<schema.Etymology>(o);
  }
}


}
