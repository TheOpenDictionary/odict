// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package schema

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Entry struct {
	_tab flatbuffers.Table
}

func GetRootAsEntry(buf []byte, offset flatbuffers.UOffsetT) *Entry {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Entry{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsEntry(buf []byte, offset flatbuffers.UOffsetT) *Entry {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Entry{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Entry) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Entry) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Entry) Key() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Entry) Term() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Entry) Etymologies(obj *Etymology, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Entry) EtymologiesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

//  static public func compare(
//     _ off1: Int32,
//     _ off2: Int32,
//     fbb: ByteBuffer) -> Int32
//   {
//     let memorySize = Int32(MemoryLayout<Int32>.size)
//     let _off1 = off1 + fbb.read(def: Int32.self, position: Int(off1))
//     let _off2 = off2 + fbb.read(def: Int32.self, position: Int(off2))
//     let len1 = fbb.read(def: Int32.self, position: Int(_off1))
//     let len2 = fbb.read(def: Int32.self, position: Int(_off2))
//     let startPos1 = _off1 + memorySize
//     let startPos2 = _off2 + memorySize
//     let minValue = min(len1, len2)
//     for i in 0...minValue {
//       let b1 = fbb.read(def: Int8.self, position: Int(i + startPos1))
//       let b2 = fbb.read(def: Int8.self, position: Int(i + startPos2))
//       if b1 != b2 {
//         return Int32(b2 - b1)
//       }
//     }
//     return len1 - len2
//   }

func Compare(offset_1 flatbuffers.UOffsetT, key []byte, buf []byte) flatbuffers.UOffsetT {
	println(offset_1)
	offset_1 += flatbuffers.GetUOffsetT(buf[offset_1:])
	println(offset_1)
	len_1 := flatbuffers.GetUOffsetT(buf[offset_1:])
	println(len_1)
	len_2 := flatbuffers.UOffsetT(len(key))
	println(len_2)
	startPos_1 := offset_1 + flatbuffers.SizeInt32
	println(startPos_1)
	len := len_1
	if len_2 < len_1 {
		len = len_2
	}
	println(len)
	for i := flatbuffers.UOffsetT(0); i < len; i++ {
			b := buf[i + startPos_1]
			if (b != key[i]) {
				return flatbuffers.UOffsetT(b - key[i]);
			}
	}
	return len_1 - len_2;
}

func Offset(vtableOffset flatbuffers.VOffsetT, offset flatbuffers.UOffsetT, buf []byte) flatbuffers.VOffsetT {
	vtable := flatbuffers.UOffsetT(len(buf)) - offset
	i := flatbuffers.GetUOffsetT(buf[vtable:])
	s := flatbuffers.GetUOffsetT(buf[:flatbuffers.GetInt8(buf[vtable + flatbuffers.UOffsetT(vtableOffset) - i:])])
	return flatbuffers.VOffsetT(s + vtable)
}

// Indirect retrieves the relative offset stored at `offset`.
func  Indirect(off flatbuffers.UOffsetT, buf []byte) flatbuffers.UOffsetT {
	return off + flatbuffers.GetUOffsetT(buf[off:])
}

func lookupByKey(obj *Entry, vector flatbuffers.UOffsetT, k string, buf []byte) bool {
	key := []byte(k)
	span := flatbuffers.GetUOffsetT(buf[vector - 4:])
	start := flatbuffers.UOffsetT(0)
	for ok := true; ok; ok = span != 0 {
		middle := span / 2
		tableOffset := Indirect(vector + 4 * (start + middle), buf)
		comp := Compare(flatbuffers.UOffsetT(Offset(4, flatbuffers.UOffsetT(len(buf)) - tableOffset, buf)), key, buf)
		if comp > 0 {
			span = middle
		} else if comp < 0 {
			middle += 1
			start += middle
			span -= middle
		} else {
			obj.Init(buf, tableOffset)
			return true
		}
	}
	return false
}

func EntryStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func EntryAddKey(builder *flatbuffers.Builder, key flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(key), 0)
}
func EntryAddTerm(builder *flatbuffers.Builder, term flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(term), 0)
}
func EntryAddEtymologies(builder *flatbuffers.Builder, etymologies flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(etymologies), 0)
}
func EntryStartEtymologiesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EntryEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
