// automatically generated by the FlatBuffers compiler, do not modify

package schema;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Dictionary extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static Dictionary getRootAsDictionary(ByteBuffer _bb) { return getRootAsDictionary(_bb, new Dictionary()); }
  public static Dictionary getRootAsDictionary(ByteBuffer _bb, Dictionary obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Dictionary __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String name() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public schema.Entry entries(int j) { return entries(new schema.Entry(), j); }
  public schema.Entry entries(schema.Entry obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int entriesLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public schema.Entry entriesByKey(String key) { int o = __offset(8); return o != 0 ? schema.Entry.__lookup_by_key(null, __vector(o), key, bb) : null; }
  public schema.Entry entriesByKey(schema.Entry obj, String key) { int o = __offset(8); return o != 0 ? schema.Entry.__lookup_by_key(obj, __vector(o), key, bb) : null; }
  public schema.Entry.Vector entriesVector() { return entriesVector(new schema.Entry.Vector()); }
  public schema.Entry.Vector entriesVector(schema.Entry.Vector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createDictionary(FlatBufferBuilder builder,
      int idOffset,
      int nameOffset,
      int entriesOffset) {
    builder.startTable(3);
    Dictionary.addEntries(builder, entriesOffset);
    Dictionary.addName(builder, nameOffset);
    Dictionary.addId(builder, idOffset);
    return Dictionary.endDictionary(builder);
  }

  public static void startDictionary(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(1, nameOffset, 0); }
  public static void addEntries(FlatBufferBuilder builder, int entriesOffset) { builder.addOffset(2, entriesOffset, 0); }
  public static int createEntriesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startEntriesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endDictionary(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishDictionaryBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedDictionaryBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Dictionary get(int j) { return get(new Dictionary(), j); }
    public Dictionary get(Dictionary obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

