// automatically generated by the FlatBuffers compiler, do not modify

package schema;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Usage extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static Usage getRootAsUsage(ByteBuffer _bb) { return getRootAsUsage(_bb, new Usage()); }
  public static Usage getRootAsUsage(ByteBuffer _bb, Usage obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Usage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte pos() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public String definitions(int j) { int o = __offset(6); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int definitionsLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public StringVector definitionsVector() { return definitionsVector(new StringVector()); }
  public StringVector definitionsVector(StringVector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public schema.Group groups(int j) { return groups(new schema.Group(), j); }
  public schema.Group groups(schema.Group obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int groupsLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public schema.Group.Vector groupsVector() { return groupsVector(new schema.Group.Vector()); }
  public schema.Group.Vector groupsVector(schema.Group.Vector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createUsage(FlatBufferBuilder builder,
      byte pos,
      int definitionsOffset,
      int groupsOffset) {
    builder.startTable(3);
    Usage.addGroups(builder, groupsOffset);
    Usage.addDefinitions(builder, definitionsOffset);
    Usage.addPos(builder, pos);
    return Usage.endUsage(builder);
  }

  public static void startUsage(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addPos(FlatBufferBuilder builder, byte pos) { builder.addByte(0, pos, 0); }
  public static void addDefinitions(FlatBufferBuilder builder, int definitionsOffset) { builder.addOffset(1, definitionsOffset, 0); }
  public static int createDefinitionsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startDefinitionsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addGroups(FlatBufferBuilder builder, int groupsOffset) { builder.addOffset(2, groupsOffset, 0); }
  public static int createGroupsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startGroupsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endUsage(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  @Override
  protected int keysCompare(Integer o1, Integer o2, ByteBuffer _bb) {
    byte val_1 = _bb.get(__offset(4, o1, _bb));
    byte val_2 = _bb.get(__offset(4, o2, _bb));
    return val_1 > val_2 ? 1 : val_1 < val_2 ? -1 : 0;
  }

  public static Usage __lookup_by_key(Usage obj, int vectorLocation, byte key, ByteBuffer bb) {
    int span = bb.getInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = __indirect(vectorLocation + 4 * (start + middle), bb);
      byte val = bb.get(__offset(4, bb.capacity() - tableOffset, bb));
      int comp = val > key ? 1 : val < key ? -1 : 0;
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return (obj == null ? new Usage() : obj).__assign(tableOffset, bb);
      }
    }
    return null;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Usage get(int j) { return get(new Usage(), j); }
    public Usage get(Usage obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
    public Usage getByKey(byte key) {  return __lookup_by_key(null, __vector(), key, bb); }
    public Usage getByKey(Usage obj, byte key) {  return __lookup_by_key(obj, __vector(), key, bb); }
  }
}

