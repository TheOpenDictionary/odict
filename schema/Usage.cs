// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace schema
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Usage : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Usage GetRootAsUsage(ByteBuffer _bb) { return GetRootAsUsage(_bb, new Usage()); }
  public static Usage GetRootAsUsage(ByteBuffer _bb, Usage obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Usage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public schema.POS Pos { get { int o = __p.__offset(4); return o != 0 ? (schema.POS)__p.bb.GetSbyte(o + __p.bb_pos) : schema.POS.v; } }
  public string Definitions(int j) { int o = __p.__offset(6); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int DefinitionsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public schema.Group? Groups(int j) { int o = __p.__offset(8); return o != 0 ? (schema.Group?)(new schema.Group()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int GroupsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<schema.Usage> CreateUsage(FlatBufferBuilder builder,
      schema.POS pos = schema.POS.v,
      VectorOffset definitionsOffset = default(VectorOffset),
      VectorOffset groupsOffset = default(VectorOffset)) {
    builder.StartTable(3);
    Usage.AddGroups(builder, groupsOffset);
    Usage.AddDefinitions(builder, definitionsOffset);
    Usage.AddPos(builder, pos);
    return Usage.EndUsage(builder);
  }

  public static void StartUsage(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddPos(FlatBufferBuilder builder, schema.POS pos) { builder.AddSbyte(0, (sbyte)pos, 0); }
  public static void AddDefinitions(FlatBufferBuilder builder, VectorOffset definitionsOffset) { builder.AddOffset(1, definitionsOffset.Value, 0); }
  public static VectorOffset CreateDefinitionsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDefinitionsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDefinitionsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddGroups(FlatBufferBuilder builder, VectorOffset groupsOffset) { builder.AddOffset(2, groupsOffset.Value, 0); }
  public static VectorOffset CreateGroupsVector(FlatBufferBuilder builder, Offset<schema.Group>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateGroupsVectorBlock(FlatBufferBuilder builder, Offset<schema.Group>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartGroupsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<schema.Usage> EndUsage(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<schema.Usage>(o);
  }

  public static VectorOffset CreateSortedVectorOfUsage(FlatBufferBuilder builder, Offset<Usage>[] offsets) {
    Array.Sort(offsets, (Offset<Usage> o1, Offset<Usage> o2) => (schema.POS)builder.DataBuffer.GetSbyte(Table.__offset(4, o1.Value, builder.DataBuffer)).CompareTo((schema.POS)builder.DataBuffer.GetSbyte(Table.__offset(4, o2.Value, builder.DataBuffer))));
    return builder.CreateVectorOfTables(offsets);
  }

  public static Usage? __lookup_by_key(int vectorLocation, schema.POS key, ByteBuffer bb) {
    int span = bb.GetInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = Table.__indirect(vectorLocation + 4 * (start + middle), bb);
      int comp = (schema.POS)bb.GetSbyte(Table.__offset(4, bb.Length - tableOffset, bb)).CompareTo(key);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return new Usage().__assign(tableOffset, bb);
      }
    }
    return null;
  }
}


}
