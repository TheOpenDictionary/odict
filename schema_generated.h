// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCHEMA_SCHEMA_H_
#define FLATBUFFERS_GENERATED_SCHEMA_SCHEMA_H_

#include "flatbuffers/flatbuffers.h"

namespace schema {

struct Etymology;
struct EtymologyBuilder;

struct Group;
struct GroupBuilder;

struct Usage;
struct UsageBuilder;

struct Entry;
struct EntryBuilder;

struct Dictionary;
struct DictionaryBuilder;

enum POS : int8_t {
  POS_v = 0,
  POS_n = 1,
  POS_adj = 2,
  POS_pro = 3,
  POS_adv = 4,
  POS_prep = 5,
  POS_conj = 6,
  POS_intj = 7,
  POS_pref = 8,
  POS_suff = 9,
  POS_part = 10,
  POS_art = 11,
  POS_un = 12,
  POS_MIN = POS_v,
  POS_MAX = POS_un
};

inline const POS (&EnumValuesPOS())[13] {
  static const POS values[] = {
    POS_v,
    POS_n,
    POS_adj,
    POS_pro,
    POS_adv,
    POS_prep,
    POS_conj,
    POS_intj,
    POS_pref,
    POS_suff,
    POS_part,
    POS_art,
    POS_un
  };
  return values;
}

inline const char * const *EnumNamesPOS() {
  static const char * const names[14] = {
    "v",
    "n",
    "adj",
    "pro",
    "adv",
    "prep",
    "conj",
    "intj",
    "pref",
    "suff",
    "part",
    "art",
    "un",
    nullptr
  };
  return names;
}

inline const char *EnumNamePOS(POS e) {
  if (flatbuffers::IsOutRange(e, POS_v, POS_un)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesPOS()[index];
}

struct Etymology FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef EtymologyBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_DESCRIPTION = 6,
    VT_USAGES = 8
  };
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  const flatbuffers::String *description() const {
    return GetPointer<const flatbuffers::String *>(VT_DESCRIPTION);
  }
  const flatbuffers::Vector<flatbuffers::Offset<schema::Usage>> *usages() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<schema::Usage>> *>(VT_USAGES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_DESCRIPTION) &&
           verifier.VerifyString(description()) &&
           VerifyOffset(verifier, VT_USAGES) &&
           verifier.VerifyVector(usages()) &&
           verifier.VerifyVectorOfTables(usages()) &&
           verifier.EndTable();
  }
};

struct EtymologyBuilder {
  typedef Etymology Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(Etymology::VT_ID, id);
  }
  void add_description(flatbuffers::Offset<flatbuffers::String> description) {
    fbb_.AddOffset(Etymology::VT_DESCRIPTION, description);
  }
  void add_usages(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<schema::Usage>>> usages) {
    fbb_.AddOffset(Etymology::VT_USAGES, usages);
  }
  explicit EtymologyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Etymology> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Etymology>(end);
    return o;
  }
};

inline flatbuffers::Offset<Etymology> CreateEtymology(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    flatbuffers::Offset<flatbuffers::String> description = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<schema::Usage>>> usages = 0) {
  EtymologyBuilder builder_(_fbb);
  builder_.add_usages(usages);
  builder_.add_description(description);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<Etymology> CreateEtymologyDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *description = nullptr,
    std::vector<flatbuffers::Offset<schema::Usage>> *usages = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto description__ = description ? _fbb.CreateString(description) : 0;
  auto usages__ = usages ? _fbb.CreateVectorOfSortedTables<schema::Usage>(usages) : 0;
  return schema::CreateEtymology(
      _fbb,
      id__,
      description__,
      usages__);
}

struct Group FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef GroupBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_DESCRIPTION = 6,
    VT_DEFINITIONS = 8
  };
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  const flatbuffers::String *description() const {
    return GetPointer<const flatbuffers::String *>(VT_DESCRIPTION);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *definitions() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_DEFINITIONS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_DESCRIPTION) &&
           verifier.VerifyString(description()) &&
           VerifyOffset(verifier, VT_DEFINITIONS) &&
           verifier.VerifyVector(definitions()) &&
           verifier.VerifyVectorOfStrings(definitions()) &&
           verifier.EndTable();
  }
};

struct GroupBuilder {
  typedef Group Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(Group::VT_ID, id);
  }
  void add_description(flatbuffers::Offset<flatbuffers::String> description) {
    fbb_.AddOffset(Group::VT_DESCRIPTION, description);
  }
  void add_definitions(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> definitions) {
    fbb_.AddOffset(Group::VT_DEFINITIONS, definitions);
  }
  explicit GroupBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Group> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Group>(end);
    return o;
  }
};

inline flatbuffers::Offset<Group> CreateGroup(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    flatbuffers::Offset<flatbuffers::String> description = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> definitions = 0) {
  GroupBuilder builder_(_fbb);
  builder_.add_definitions(definitions);
  builder_.add_description(description);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<Group> CreateGroupDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *description = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *definitions = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto description__ = description ? _fbb.CreateString(description) : 0;
  auto definitions__ = definitions ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*definitions) : 0;
  return schema::CreateGroup(
      _fbb,
      id__,
      description__,
      definitions__);
}

struct Usage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef UsageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POS = 4,
    VT_DEFINITIONS = 6,
    VT_GROUPS = 8
  };
  schema::POS pos() const {
    return static_cast<schema::POS>(GetField<int8_t>(VT_POS, 0));
  }
  bool KeyCompareLessThan(const Usage *o) const {
    return pos() < o->pos();
  }
  int KeyCompareWithValue(int8_t _pos) const {
    return static_cast<int>(pos() > _pos) - static_cast<int>(pos() < _pos);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *definitions() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_DEFINITIONS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<schema::Group>> *groups() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<schema::Group>> *>(VT_GROUPS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_POS, 1) &&
           VerifyOffset(verifier, VT_DEFINITIONS) &&
           verifier.VerifyVector(definitions()) &&
           verifier.VerifyVectorOfStrings(definitions()) &&
           VerifyOffset(verifier, VT_GROUPS) &&
           verifier.VerifyVector(groups()) &&
           verifier.VerifyVectorOfTables(groups()) &&
           verifier.EndTable();
  }
};

struct UsageBuilder {
  typedef Usage Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pos(schema::POS pos) {
    fbb_.AddElement<int8_t>(Usage::VT_POS, static_cast<int8_t>(pos), 0);
  }
  void add_definitions(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> definitions) {
    fbb_.AddOffset(Usage::VT_DEFINITIONS, definitions);
  }
  void add_groups(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<schema::Group>>> groups) {
    fbb_.AddOffset(Usage::VT_GROUPS, groups);
  }
  explicit UsageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Usage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Usage>(end);
    return o;
  }
};

inline flatbuffers::Offset<Usage> CreateUsage(
    flatbuffers::FlatBufferBuilder &_fbb,
    schema::POS pos = schema::POS_v,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> definitions = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<schema::Group>>> groups = 0) {
  UsageBuilder builder_(_fbb);
  builder_.add_groups(groups);
  builder_.add_definitions(definitions);
  builder_.add_pos(pos);
  return builder_.Finish();
}

inline flatbuffers::Offset<Usage> CreateUsageDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    schema::POS pos = schema::POS_v,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *definitions = nullptr,
    const std::vector<flatbuffers::Offset<schema::Group>> *groups = nullptr) {
  auto definitions__ = definitions ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*definitions) : 0;
  auto groups__ = groups ? _fbb.CreateVector<flatbuffers::Offset<schema::Group>>(*groups) : 0;
  return schema::CreateUsage(
      _fbb,
      pos,
      definitions__,
      groups__);
}

struct Entry FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef EntryBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KEY = 4,
    VT_TERM = 6,
    VT_ETYMOLOGIES = 8
  };
  const flatbuffers::String *key() const {
    return GetPointer<const flatbuffers::String *>(VT_KEY);
  }
  bool KeyCompareLessThan(const Entry *o) const {
    return *key() < *o->key();
  }
  int KeyCompareWithValue(const char *_key) const {
    return strcmp(key()->c_str(), _key);
  }
  const flatbuffers::String *term() const {
    return GetPointer<const flatbuffers::String *>(VT_TERM);
  }
  const flatbuffers::Vector<flatbuffers::Offset<schema::Etymology>> *etymologies() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<schema::Etymology>> *>(VT_ETYMOLOGIES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_KEY) &&
           verifier.VerifyString(key()) &&
           VerifyOffset(verifier, VT_TERM) &&
           verifier.VerifyString(term()) &&
           VerifyOffset(verifier, VT_ETYMOLOGIES) &&
           verifier.VerifyVector(etymologies()) &&
           verifier.VerifyVectorOfTables(etymologies()) &&
           verifier.EndTable();
  }
};

struct EntryBuilder {
  typedef Entry Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_key(flatbuffers::Offset<flatbuffers::String> key) {
    fbb_.AddOffset(Entry::VT_KEY, key);
  }
  void add_term(flatbuffers::Offset<flatbuffers::String> term) {
    fbb_.AddOffset(Entry::VT_TERM, term);
  }
  void add_etymologies(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<schema::Etymology>>> etymologies) {
    fbb_.AddOffset(Entry::VT_ETYMOLOGIES, etymologies);
  }
  explicit EntryBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Entry> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Entry>(end);
    fbb_.Required(o, Entry::VT_KEY);
    return o;
  }
};

inline flatbuffers::Offset<Entry> CreateEntry(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> key = 0,
    flatbuffers::Offset<flatbuffers::String> term = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<schema::Etymology>>> etymologies = 0) {
  EntryBuilder builder_(_fbb);
  builder_.add_etymologies(etymologies);
  builder_.add_term(term);
  builder_.add_key(key);
  return builder_.Finish();
}

inline flatbuffers::Offset<Entry> CreateEntryDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *key = nullptr,
    const char *term = nullptr,
    const std::vector<flatbuffers::Offset<schema::Etymology>> *etymologies = nullptr) {
  auto key__ = key ? _fbb.CreateString(key) : 0;
  auto term__ = term ? _fbb.CreateString(term) : 0;
  auto etymologies__ = etymologies ? _fbb.CreateVector<flatbuffers::Offset<schema::Etymology>>(*etymologies) : 0;
  return schema::CreateEntry(
      _fbb,
      key__,
      term__,
      etymologies__);
}

struct Dictionary FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DictionaryBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_NAME = 6,
    VT_ENTRIES = 8
  };
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::Vector<flatbuffers::Offset<schema::Entry>> *entries() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<schema::Entry>> *>(VT_ENTRIES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_ENTRIES) &&
           verifier.VerifyVector(entries()) &&
           verifier.VerifyVectorOfTables(entries()) &&
           verifier.EndTable();
  }
};

struct DictionaryBuilder {
  typedef Dictionary Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(Dictionary::VT_ID, id);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Dictionary::VT_NAME, name);
  }
  void add_entries(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<schema::Entry>>> entries) {
    fbb_.AddOffset(Dictionary::VT_ENTRIES, entries);
  }
  explicit DictionaryBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Dictionary> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Dictionary>(end);
    return o;
  }
};

inline flatbuffers::Offset<Dictionary> CreateDictionary(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<schema::Entry>>> entries = 0) {
  DictionaryBuilder builder_(_fbb);
  builder_.add_entries(entries);
  builder_.add_name(name);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<Dictionary> CreateDictionaryDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *name = nullptr,
    std::vector<flatbuffers::Offset<schema::Entry>> *entries = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto entries__ = entries ? _fbb.CreateVectorOfSortedTables<schema::Entry>(entries) : 0;
  return schema::CreateDictionary(
      _fbb,
      id__,
      name__,
      entries__);
}

inline const schema::Dictionary *GetDictionary(const void *buf) {
  return flatbuffers::GetRoot<schema::Dictionary>(buf);
}

inline const schema::Dictionary *GetSizePrefixedDictionary(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<schema::Dictionary>(buf);
}

inline bool VerifyDictionaryBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<schema::Dictionary>(nullptr);
}

inline bool VerifySizePrefixedDictionaryBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<schema::Dictionary>(nullptr);
}

inline void FinishDictionaryBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<schema::Dictionary> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDictionaryBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<schema::Dictionary> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace schema

#endif  // FLATBUFFERS_GENERATED_SCHEMA_SCHEMA_H_
